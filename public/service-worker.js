"use strict"; var precacheConfig = [["/index.html", "3fbd142adc38ddf94a46e216031b9997"], ["/static/css/main.d6a11547.css", "6f59c99280c982dfd565eae36ccb5d0b"], ["/static/js/0.4ffd9259.chunk.js", "7a348e4693973342d5bbf126a336b66b"], ["/static/js/1.52d183d7.chunk.js", "504d96de0a49d21460b907eaca1248c0"], ["/static/js/10.44137ec8.chunk.js", "75edec722fad15f332135c45f91f89f0"], ["/static/js/11.a3091a89.chunk.js", "68aa38712e14b7e8a4a592b42792a66b"], ["/static/js/12.c7e16f06.chunk.js", "ac7039b017bcc0dc0fb5378d5c756a5a"], ["/static/js/13.86901b0c.chunk.js", "8a71f0588d37bf6ae7b3ea8d22ef5c63"], ["/static/js/14.9e09f6ee.chunk.js", "e05b1f2497bb229ee46e46c34013dc85"], ["/static/js/2.41341f91.chunk.js", "fc85f8ad3bdd515ca0eecef9552064e6"], ["/static/js/3.3694bf50.chunk.js", "76e163ee36451768ee7f04b2cdbdb4e1"], ["/static/js/4.b4ecf7d7.chunk.js", "b58c2ec863c38273ed03e7d3402087cc"], ["/static/js/5.a8c67be1.chunk.js", "4372cc3144a2b1875a754d688bc4d24f"], ["/static/js/6.3e5e0f83.chunk.js", "4b2fc860c7ee475e646cfb9791dfa4ca"], ["/static/js/7.45ecdbd7.chunk.js", "d58a25c817e9b367073bcc0569f1195e"], ["/static/js/8.c915e89f.chunk.js", "0cb70935fd8ea4d4c74c6dded6785e03"], ["/static/js/9.9a420317.chunk.js", "aa1915562195b51c7a76b5b827258419"], ["/static/js/main.5004fc42.js", "317ace02104c328cc6e977403a4dbc6c"], ["/static/media/G-Unit.00b8effd.ttf", "00b8effdbdc4d3ccaa5077ae07fd426f"], ["/static/media/batka.c6930931.jpg", "c6930931f979f3f320bd024bdb7fb7c8"], ["/static/media/crime.36e9d7d9.wav", "36e9d7d9c6638b95c5888716866b6dcb"], ["/static/media/crime.b646584f.png", "b646584fbab45a3580e50048e40eefa2"], ["/static/media/gangsta1.0338383a.jpg", "0338383ab1f8ef25e395f27b9c4fdf06"], ["/static/media/gangsta2.83b04107.jpg", "83b04107577b3de2b493710c9c5c941e"], ["/static/media/gangsta4.97026d89.jpg", "97026d899e51efb7b2e7cbe6661222ab"], ["/static/media/icons.9ea8e3d4.woff2", "9ea8e3d4fceae3eb6e66716bc430122e"], ["/static/media/politic.2bcb2528.jpg", "2bcb2528533e292861c64e9e2aa406fc"], ["/static/media/politics.2addae02.wav", "2addae023027ca93e66aa2f277003e53"], ["/static/media/pop.bef30e64.jpg", "bef30e645ade6b4503d01c7f5cb93ea9"], ["/static/media/putin.e3d76e61.jpg", "e3d76e61534069fae3eacdb49cf3618a"], ["/static/media/sport.4a7c1a6e.wav", "4a7c1a6efda036a5ac8146dc370dd056"], ["/static/media/sport2.4949bf9a.jpg", "4949bf9a3a4223dfa7023e9cf08ad744"], ["/static/media/sport3.0ed7b4bf.jpg", "0ed7b4bf713cdddb053d07a53308e0cc"], ["/static/media/sport4.71df1ca5.jpg", "71df1ca585a742dda6cb5b3d88b07766"], ["/static/media/trump.57bd52a4.jpg", "57bd52a4278045f0c0f88b4aaa47397a"]], cacheName = "sw-precache-v3-sw-precache-webpack-plugin-" + (self.registration ? self.registration.scope : ""), ignoreUrlParametersMatching = [/^utm_/], addDirectoryIndex = function (e, a) { var t = new URL(e); return "/" === t.pathname.slice(-1) && (t.pathname += a), t.toString() }, cleanResponse = function (e) { return e.redirected ? ("body" in e ? Promise.resolve(e.body) : e.blob()).then(function (a) { return new Response(a, { headers: e.headers, status: e.status, statusText: e.statusText }) }) : Promise.resolve(e) }, createCacheKey = function (e, a, t, c) { var n = new URL(e); return c && n.pathname.match(c) || (n.search += (n.search ? "&" : "") + encodeURIComponent(a) + "=" + encodeURIComponent(t)), n.toString() }, isPathWhitelisted = function (e, a) { if (0 === e.length) return !0; var t = new URL(a).pathname; return e.some(function (e) { return t.match(e) }) }, stripIgnoredUrlParameters = function (e, a) { var t = new URL(e); return t.hash = "", t.search = t.search.slice(1).split("&").map(function (e) { return e.split("=") }).filter(function (e) { return a.every(function (a) { return !a.test(e[0]) }) }).map(function (e) { return e.join("=") }).join("&"), t.toString() }, hashParamName = "_sw-precache", urlsToCacheKeys = new Map(precacheConfig.map(function (e) { var a = e[0], t = e[1], c = new URL(a, self.location), n = createCacheKey(c, hashParamName, t, /\.\w{8}\./); return [c.toString(), n] })); function setOfCachedUrls(e) { return e.keys().then(function (e) { return e.map(function (e) { return e.url }) }).then(function (e) { return new Set(e) }) } self.addEventListener("install", function (e) { e.waitUntil(caches.open(cacheName).then(function (e) { return setOfCachedUrls(e).then(function (a) { return Promise.all(Array.from(urlsToCacheKeys.values()).map(function (t) { if (!a.has(t)) { var c = new Request(t, { credentials: "same-origin" }); return fetch(c).then(function (a) { if (!a.ok) throw new Error("Request for " + t + " returned a response with status " + a.status); return cleanResponse(a).then(function (a) { return e.put(t, a) }) }) } })) }) }).then(function () { return self.skipWaiting() })) }), self.addEventListener("activate", function (e) { var a = new Set(urlsToCacheKeys.values()); e.waitUntil(caches.open(cacheName).then(function (e) { return e.keys().then(function (t) { return Promise.all(t.map(function (t) { if (!a.has(t.url)) return e.delete(t) })) }) }).then(function () { return self.clients.claim() })) }), self.addEventListener("fetch", function (e) { if ("GET" === e.request.method) { var a, t = stripIgnoredUrlParameters(e.request.url, ignoreUrlParametersMatching), c = "index.html"; (a = urlsToCacheKeys.has(t)) || (t = addDirectoryIndex(t, c), a = urlsToCacheKeys.has(t)); var n = "/index.html"; !a && "navigate" === e.request.mode && isPathWhitelisted(["^(?!\\/__).*"], e.request.url) && (t = new URL(n, self.location).toString(), a = urlsToCacheKeys.has(t)), a && e.respondWith(caches.open(cacheName).then(function (e) { return e.match(urlsToCacheKeys.get(t)).then(function (e) { if (e) return e; throw Error("The cached response that was expected is missing.") }) }).catch(function (a) { return console.warn('Couldn\'t serve response for "%s" from cache: %O', e.request.url, a), fetch(e.request) })) } });